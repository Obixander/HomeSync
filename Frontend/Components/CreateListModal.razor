@using Entities
@using Frontend.Data
@using Services
@inject SignalRService hub
@inject SessionToken token
@*Will be used to set the width to the fullscreen and the transparet background*@
<div class="ModalContainer">

    @*Will be used for the actual modal*@
    <div class="Modal" @onclick:stopPropagation>
        <div class="ModalHeaderContainer">
            <div>
                @if(!IsCreate)
                {
                    <i class="fa-solid fa-trash" @onclick="Delete"></i>
                }
            </div>
            <input @bind="@CustomList.Name" placeholder="Enter List Title"/>
            <div class="ModalHeaderIconContainer">
                <i class="fa-solid fa-x" @onclick="Close"></i>
            </div>
        </div>
        <hr />
        <div class="ModalTimeSelectionContainer">
            <div class="ModalTimeSelectionElement">
                <div>
                    <h4>Start Date</h4>
                    <input type="date" @bind="@startDate" />
                    <input type="time" @bind="@startTime" />
                </div>
            </div>
            <div class="ModalTimeSelectionElementCenter">
                ---
            </div>
            <div class="ModalTimeSelectionElement">
                <div>
                    <h4>End Date</h4>
                    <input type="date" @bind="@endDate" />
                    <input type="time" @bind="@endTime" />
                </div>
            </div>

        </div>
        <hr />
        <div class="ModalDescriptionContainer">
            <div>
                <div>
                    <h3>Create Item</h3>
                    <div>
                        <input type="text" placeholder="Title" @bind="tempName" />
                        <button @onclick="AddItemToList">Add Item</button>
                    </div>
                </div>
            </div>
            <hr class="test" />
            <div Id="Scrollable">
                @if (CustomList.Items != null && CustomList.Items.Count > 0)
                {
                    @foreach (var item in CustomList.Items)
                    {
                        <div class="ListItem">
                            <div>
                                <input type="checkbox" @bind="@item.Completed" />
                                <h4>@item.Content</h4>
                            </div>
                            <i @onclick="() => DeleteItem(item)" class="fa-solid fa-trash"></i>
                        </div>
                    }
                }
            </div>
        </div>


        <div class="ModalSaveContainer">
            <button @onclick="Save">
                Save List
            </button>
        </div>
    </div>
</div>



@if (IsCloseModalShown)
{
    <div class="CloseModalWarningContainer">
        <div class="CloseModalWarning" @onclick:stopPropagation>
            <h3>Data wont be saved if menu is closed</h3>
            <div class="CloseModalButtonContainer">
                <button class="CloseModalButtonClose" @onclick="ExitModal">
                    Close
                </button>
                <button class="CloseModalButtonBack" @onclick="Back">
                    Back
                </button>
            </div>
        </div>
    </div>
}

@code {
    private bool IsCloseModalShown = false;
    private string tempName = "";
    private DateTime startDate = DateTime.Now.Date;
    private DateTime startTime = DateTime.Now;
    private DateTime endDate = DateTime.Now.Date.AddHours(1);
    private DateTime endTime = DateTime.Now.AddHours(1);
    private bool IsCreate;
    [Parameter]
    public CustomList? CustomList { get; set; }
    [Parameter]
    public EventCallback CloseModal { get; set; }

    protected override void OnInitialized()
    {
        if (CustomList == null)
        {
            CustomList = new CustomList();
            CustomList.Items = new();
            IsCreate = true;
        }
        else
        {
            IsCreate = false;
            startDate = CustomList.StartDate;
            startTime = CustomList.StartDate;
            endDate = CustomList.EndDate;
            endTime = CustomList.EndDate;
        }
    }

    private async void Save()
    {
        if (IsCreate)
        {
            CustomList.FamilyId = token.CurrentAccount.FamilyId ?? throw new NullReferenceException();
            CustomList.StartDate = startDate.Date + startTime.TimeOfDay;
            CustomList.EndDate = endDate.Date + endTime.TimeOfDay;
            if (CustomList.StartDate > CustomList.EndDate)
            {
                throw new Exception("The End date was before the Start date please insure the End date is after the startdate");
            }
            else
            {
                await hub.SaveList(CustomList.FamilyId, CustomList);
                await CloseModal.InvokeAsync(null);
            }
        }
        else
        {
            CustomList.StartDate = startDate.Date + startTime.TimeOfDay;
            CustomList.EndDate = endDate.Date + endTime.TimeOfDay;
            await hub.UpdateList(CustomList.FamilyId, CustomList);
            await CloseModal.InvokeAsync(null);
        }
    }

    private async void Delete()
    {
        await hub.DeleteList(CustomList.FamilyId, CustomList);
        await CloseModal.InvokeAsync(null);
    }

    private async void ExitModal()
    {
        await CloseModal.InvokeAsync(null);
    }

    private void Back()
    {
        IsCloseModalShown = false;
    }

    private async void Close()
    {
        if (IsCreate)
        {
            IsCloseModalShown = true;
        }
        else
        {
            await CloseModal.InvokeAsync(null);
        }
    }
    private void AddItemToList()
    {
        if (tempName != "" && tempName != null)
        {
            CustomListItem item = new CustomListItem(tempName, false);
            if (CustomList.Items != null)
            {
                CustomList.Items.Add(item);
            }
        }
    }

    private async void DeleteItem(CustomListItem item)
    {
        if (CustomList.Items != null)
        {
            await hub.RemoveListItem(CustomList.FamilyId, item);
            CustomList.Items.Remove(item);
            await InvokeAsync(StateHasChanged);
        }
    }

}
