@using Entities
@using Frontend.Components
@using Microsoft.AspNetCore.SignalR.Client
@using Services
@using Frontend.Data
@inject SignalRService hub
@inject SessionToken Token
<div id="Settings-Menu-Body">
    
    @* Settings Header *@
    <div id="Settings-Menu-Header">
        <div>
            <h1>Settings</h1>
        </div>
        <i class="fa-solid fa-arrow-right" @onclick="Back"></i>
    </div>
    @* Settings Header *@

    @* Settings Body *@
    <div id="Settings-Menu-Container">

        <div class="Settings-Menu-Section">
            <h3>Roles</h3>
            <hr />

            
            @foreach (var member in family.Members)
            { 
                <div class="Settings-Menu-Item-Container">
                    <p>@member.UserName</p>
                    <div id="Settings-Menu-Downdown-Container">
                        <select class="form-select" @onchange="(e) => RoleChanged(member, e)">
                            @foreach (var role in roles)
                            {
                                <option value="@role.RoleName"
                                        selected="@IsRoleSelected(member, role)">
                                    @role.RoleName
                                </option>
                            }
                        </select>
                    </div>
                </div>
            }
        </div>

        <div class="Settings-Menu-Section">
            <h3>Profile Image</h3>
            <hr />
            <p>Click on a Image to set your profile image</p>
            <div id="Settings-Menu-Image-Container">
                @foreach(var image in images)
                {
                    if (image == Token.CurrentAccount.ProfilePhoto)
                    {
                        <img id="CurrentImage" src="@image" @onclick="() => ImageClicked(image)" />
                    }
                    else
                    {
                        <img src="@image" @onclick="() => ImageClicked(image)" />
                    }
                }
            </div>
        </div>
        
    </div>
    @* Settings Body *@

</div>
@code {
    [Parameter]
    public Family family { get; set; } //doesn't contain the roles for some reason ;-;
    [Parameter]
    public EventCallback CloseModal { get; set; }
    private List<string> images = new();
    private List<Role> roles = new();
    protected override void OnInitialized()
    {
        images.Add("/images/profile/Crab.jpg");
        images.Add("/images/profile/Dog.jpg");
        images.Add("/images/profile/Penguin.jpg");
        roles.Add(new("Parent", 3));
        roles.Add(new("Teenager", 2));
        roles.Add(new("Child", 1));



        base.OnInitialized();
    }

    private bool IsRoleSelected(User member, Role role)
    { //TODO: Change this to some better at some point
      //if Role == "Parent" meaning Member.UserRoles.First().RoleId == 1 is true
        switch (role.RoleName)
        {
            case "Parent":
                return member.UserRoles.First().RoleId == 1;
            case "Teenager":
                return member.UserRoles.First().RoleId == 3;
            case "Child":
                return member.UserRoles.First().RoleId == 4;
            default:
                return false;

        }
    }

    private void RoleChanged(User member, ChangeEventArgs e)
    {

        var selectedRoleName = e.Value?.ToString();
        Console.WriteLine(selectedRoleName);
        var selectedRole = roles.First(x => x.RoleName == selectedRoleName);
        Console.WriteLine(selectedRole);
        hub.HubConnection.InvokeAsync("UpdateUserRole", member, selectedRole);
    }

    private void Back()
    {
        CloseModal.InvokeAsync(null);
    }

    private async void ImageClicked(string imageUrl)
    {
        Token.CurrentAccount.ProfilePhoto = imageUrl;
        var temp = await hub.HubConnection.InvokeAsync<bool>("AccountUpdated", Token.CurrentAccount);
        if (temp)
        {
            Console.WriteLine("Profile Image Updated");
        }
        else
        {
            Console.WriteLine("Profile Image Update Failed");
        }
    }
}
