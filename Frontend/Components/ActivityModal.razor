@using Entities
@using Frontend.Data
@using Services
@inject SignalRService hub
@inject SessionToken token
@*Will be used to set the width to the fullscreen and the transparet background*@
<div class="ModalContainer" @onclick="Close">

    @*Will be used for the actual modal*@
    <div class="Modal" @onclick:stopPropagation>
        @if (!isEditing)
        {
            <div class="ActiveMemberContainer">
                <div class="ActiveMemberIconContainer">
                    @foreach (var member in Activity.AssignedMembers ?? throw new NullReferenceException())
                    {
                        <img src="@member.ProfilePhoto" alt="Profile Image should be here" />

                    }
                </div>
                <div class="ActiveMemberDeleteContainer">
                    <i @onclick="() => DeleteActivity()" class="fa-solid fa-trash"></i>
                </div>
            </div>
            <div class="MainBodyContainer">
                @* Top Row Section *@
                <div class="HeaderRowContainer">
                    <h1>@Activity.Name</h1>
                    <div class="HeaderRowIconContainer">
                        <select class="form-select" @bind="@temp.Status">
                            <option>@StatusOfActivity.Pending</option>
                            <option>@StatusOfActivity.Active</option>
                            <option>@StatusOfActivity.Completed</option>
                            <option>@StatusOfActivity.Cancelled</option>
                        </select>
                        <i class="fa-solid fa-pen" @onclick="Edit"></i>
                    </div>
                </div>

                @* Middle Row Section *@
                <hr />
                <div class="MiddleRowContainer">
                    <div class="MiddleRowItem">
                        <div>
                            <h4>Start Date</h4>
                            <p>@temp.StartDate</p>
                        </div>
                    </div>
                    <div class="Seperator">
                        <hr />
                    </div>
                    <div class="MiddleRowItem">
                        <div>
                            <h4>End Date</h4>
                            <p>@temp.EndDate</p>
                        </div>
                    </div>
                </div>



                @* Description Row Section *@
                <hr />
                <div class="DescriptionRowContainer">
                    <h3>
                        Description
                    </h3>
                    <p>@temp.Description</p>
                </div>
            </div>
        }
        else if (isEditing)
        {
            <div class="ActiveMemberContainer">
                <div class="ActiveMemberIconContainer">
                    @foreach (var member in Activity.AssignedMembers ?? throw new NullReferenceException())
                    {
                        <img class="ProfilPhotoEdit" src="@member.ProfilePhoto" alt="Profile Image should be here" @onclick="() => RemoveMember(member)" />
                    }
                    <div class="AddMemberContainer">
                        <div class="EditAddMember" @onclick="AddMember">
                            <i class="fa-solid fa-plus"></i>
                        </div>
                        @if (AddingMembers)
                        {
                            <ul class="AddMember">
                                @foreach (var member in token.CurrentAccount.Family.Members ?? throw new ArgumentNullException())
                                {
                                    <li @onclick="() => OnItemSelected(member)" class="@(SelectedItems.Contains(member) ? "selected" : "")">@member.UserName</li>
                                }
                            </ul>
                        }
                    </div>
                </div>
                <div class="ActiveMemberDeleteContainer">
                    <i class="fa-solid fa-trash"></i>
                </div>
            </div>
            <div class="MainBodyContainer">
                @* Top Row Section *@
                <div class="HeaderRowContainer">
                    <input @bind="@temp.Name" />
                    <div class="HeaderRowIconContainer">
                        <select class="form-select" @bind="@temp.Status">
                            <option>@StatusOfActivity.Pending</option>
                            <option>@StatusOfActivity.Active</option>
                            <option>@StatusOfActivity.Completed</option>
                            <option>@StatusOfActivity.Cancelled</option>
                        </select>
                        <i class="fa-solid fa-ban" @onclick="Edit"></i>
                    </div>
                </div>

                @* Middle Row Section *@
                <hr />
                <div class="MiddleRowContainer">
                    <div class="MiddleRowItem">
                        <div>
                            <h4>Start Date</h4>
                            <input type="date" @bind="@startDate" />
                            <input type="time" @bind="@startTime" />
                        </div>
                    </div>
                    <div class="Seperator">
                        <hr />
                    </div>
                    <div class="MiddleRowItem">
                        <div>
                            <h4>End Date</h4>
                            <input type="date" @bind="@endDate" />
                            <input type="time" @bind="@endTime" />
                        </div>
                    </div>
                </div>

                @* Description Row Section *@
                <hr />
                <div class="DescriptionRowContainer">
                    <h3>
                        Description
                    </h3>
                    <textarea @bind="@temp.Description"></textarea>
                    <button @onclick="Close">Save Changes</button>
                </div>
            </div>
        }

    </div>
</div>

@code
{
    [Parameter]
    public Activity Activity { get; set; }
    private Activity temp;
    [Parameter]
    public EventCallback CloseModal { get; set; }

    private bool isEditing = false;
    private bool AddingMembers = false;
    private HashSet<User> SelectedItems = new() { };
    private DateTime startDate = DateTime.Now.Date;
    private DateTime startTime = DateTime.Now;
    private DateTime endDate = DateTime.Now.Date.AddHours(1);
    private DateTime endTime = DateTime.Now.AddHours(1);

    protected override void OnInitialized()
    {
        startDate = Activity.StartDate.Date;
        startTime = Activity.StartDate;
        endDate = Activity.EndDate.Date;
        endTime = Activity.EndDate;
        temp = Activity;
    }

    private async void DeleteActivity()
    {
        //call hub;
        await hub.DeleteActivity(token.CurrentAccount.FamilyId ?? throw new ArgumentNullException(), Activity);
        await CloseModal.InvokeAsync(null);
    }


    private void AddMember()
    {
        AddingMembers = !AddingMembers;
    }
    private void RemoveMember(User user)
    {
        if (Activity != null)
        {
            Activity.AssignedMembers.Remove(user);
            StateHasChanged();
        }
    }

    private void Edit()
    {
        isEditing = !isEditing;
        foreach (var member in Activity.AssignedMembers)
        {
            member.Activities = null;
            if (!SelectedItems.Contains(member))
            { 
                SelectedItems.Add(member); 
            }
        }
        StateHasChanged();
    }

    private async void Close()
    {
        temp.StartDate = startDate.Date + startTime.TimeOfDay;
        temp.EndDate = endDate.Date + endTime.TimeOfDay;
        await hub.UpdateActivity(token.CurrentAccount.FamilyId ?? throw new NullReferenceException(), temp);
        await CloseModal.InvokeAsync(null);
    }

    private void OnItemSelected(User selectedItem)
    {
        if (!SelectedItems.Contains(selectedItem))
        {
            SelectedItems.Add(selectedItem);
            Activity.AssignedMembers.Add(selectedItem);
        }
        else
        {
            SelectedItems.Remove(selectedItem);
            Activity.AssignedMembers.Remove(selectedItem);
        }
    }

}
