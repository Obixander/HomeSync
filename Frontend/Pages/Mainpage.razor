@page "/mainpage"
@* @rendermode InteractiveWebAssemblyRenderMode *@
@using Entities
@using Frontend.Components
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Services
@using System.Globalization
@using Frontend.Data
@inject NavigationManager Navigation
@inject SignalRService hub
@inject SessionToken Token

@if (activities != null)
{
    UpdateTableTimeSlots();
    <div id="ContentContainer">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th><button class="TableButton" @onclick="() => CreateActivity()">Add Activity</button></th>
                    <th colspan="6"><h1>Week: @WeekNumber</h1></th>
                    <th><img src="@Token.CurrentAccount.ProfilePhoto" alt="Alternate Text" /></th>
                </tr>
                <tr class="TableHeaderContainer">
                    <th><button><i class="fa-solid fa-gear"></i></button></th>
                    <th>Monday</th>
                    <th>Tuesday</th>
                    <th>Wednesday</th>
                    <th>Thursday</th>
                    <th>Friday</th>
                    <th>Saturday</th>
                    <th>Sunday</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var timeSlot in timeSlots)
                {
                    <tr>
                        <td>@timeSlot</td>
                        @foreach (var day in weekdays)
                        {
                            <td>
                                <!-- Set relative position for stacking -->
                                @{
                                    // Find activities for this timeslot and day
                                    var activitiesInThisSlot = activities.Where(activity => activity.StartDate.DayOfWeek.ToString() == day && activity.StartDate.ToString("HH") == timeSlot.Split(":")[0]).ToList();

                                    // Calculate overlap positions dynamically
                                    var maxOverlap = activitiesInThisSlot.Count;
                                    string activityWidth = "";
                                    if (maxOverlap != 0)
                                    {
                                        activityWidth = (100 / maxOverlap).ToString();
                                    }
                                    else
                                    {
                                        activityWidth = "100";
                                    }
                                    activityWidth += "%";
                                    int index = 0;
                                }

                                @foreach (var activity in activitiesInThisSlot)
                                {
                                    //The old way the Activity card's where calcaluted
                                   @*  var durationInHours = (activity.EndDate.Hour - activity.StartDate.Hour); //this part might be giving issues
                                    string height = (((int)durationInHours * 60) + activity.EndDate.Minute).ToString() + "px"; // each <td> is 60px which means 1 px is 1 minute
                                    string marginTop = activity.StartDate.Minute.ToString() + "px"; // Minutes to pixels for start offset *@
                                    
                                    // Calculate duration and offset
                                    var durationInMinutes = (activity.EndDate - activity.StartDate).TotalMinutes; //this part might be giving issues
                                    string height = (((int)durationInMinutes)).ToString() + "px";
                                    string marginTop = activity.StartDate.Minute.ToString() + "px";

                                    string leftOffset = (index * int.Parse(activityWidth.Split("%")[0])).ToString() + "%"; // Horizontal positioning
                                    string color = "";
                                    @switch (activity.Status)
                                    {
                                        case StatusOfActivity.Pending:
                                            color = "#ff9600";
                                            break;
                                        case StatusOfActivity.Active:
                                            color = "#f4f13f";
                                            break;
                                        case StatusOfActivity.Completed:
                                            color = "#a2ff2c";
                                            break;
                                        case StatusOfActivity.Cancelled:
                                            color = "#C70039";
                                            break;
                                    }
                                    <div class="activity-card"
                                         style="
                                        height:@height; margin-top:@marginTop;
                                        width:@activityWidth;
                                        left:@leftOffset;
                                        background-color:@color;"
                                         @onclick="() => CardPressed(activity)">
                                        <ActivityCard Activity="@activity"></ActivityCard>
                                    </div>

                                    index++; // Increment for next overlapping activity
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
        
        <div id="ListSectionContainer">
            <div class="ListSectionHeader">
                <div>
                    <h2>Create List</h2>
                </div>
                <div>
                    <i class="fa-solid fa-plus" @onclick="() =>ToggleListCreation()"></i>
                </div>
            </div>
            
        <section class="ListContainer">
                @foreach (var list in customLists)
                { //TODO: Add sorting to the lists so that earliest one comes first
                    <div class="CustomList">
                        <div>
                            <h3>@list.Name</h3>
                            <i class="fa-solid fa-pen" @onclick="() =>EditList(list)"></i>
                        </div>
                        <div>
                            @list.StartDate
                            -
                            @list.EndDate
                        </div>
                        <hr />
                        @if (list.Items != null)
                        {
                            @foreach (var item in list.Items)
                            {
                                <div>
                                    <input type="checkbox" @onclick="() => UpdateListItem(item, list)" checked="@item.Completed" />
                                    @item.Content
                                </div>
                            }
                        }
                    </div>
                }
        </section>
        </div>

    </div>

    @if (isModalVisible)
    {
        <ActivityModal Activity="@clickedActivity" CloseModal="CloseModal"></ActivityModal>
    }
    @if (isCreateModalVisible)
    {
        <CreateActivityModal FamilyMembers="@family.Members" CloseModal="CloseCreation"></CreateActivityModal>
    }
    @if (isCreateListVisible)
    {
        //add componenet for Adding Lists here;
        <CreateListModal CloseModal="ToggleListCreation"></CreateListModal>
    }
    @if (IsEditListVisible)
    {
        <CreateListModal CustomList="@SelectedList" CloseModal="ToggleListUpdate"></CreateListModal>

    }
}

@code {
    private bool IsEditListVisible = false;
    private bool isCreateModalVisible = false;
    private bool isModalVisible = false;
    private bool isCreateListVisible = false;
    private CustomList SelectedList = null;
    private Activity clickedActivity = null;
    private Calendar calendar;
    private int weekNumber;
    public int WeekNumber
    {
        get
        {
            return weekNumber;
        }
        set
        {
            weekNumber = value;
        }
    }


    private Family family;
    private List<Activity> activities = new();
    private List<CustomList> customLists = new();

    private List<string> weekdays = new List<string>
    {
        "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"
    };
    private List<string> timeSlots = new List<string>();
    public void CreateList()
    {
        isCreateListVisible = !isCreateListVisible;
    }

    protected async override Task OnInitializedAsync()
    {
        if (hub.HubConnection.State == HubConnectionState.Connected)
        {
            calendar = new CultureInfo("da-dk").Calendar;
            WeekNumber = calendar.GetWeekOfYear(DateTime.UtcNow, CalendarWeekRule.FirstDay, DayOfWeek.Monday);

            string temp = await hub.HubConnection.InvokeAsync<string>("GetAllActivities", Token.CurrentAccount.FamilyId);
            activities = JsonConvert.DeserializeObject<List<Activity>>(temp) ?? throw new ArgumentNullException();
            family = await hub.HubConnection.InvokeAsync<Family>("GetFamily", Token.CurrentAccount.FamilyId) ?? throw new ArgumentNullException();

            temp = await hub.HubConnection.InvokeAsync<string>("GetAllLists", Token.CurrentAccount.FamilyId);
            customLists = JsonConvert.DeserializeObject<List<CustomList>>(temp) ?? throw new ArgumentNullException();

            Token.CurrentAccount.FamilyId = family.FamilyId;
            Token.CurrentAccount.Family = family;


            hub.HubConnection.On<string>("ListDeleted", async Event =>
           {
               var temp = JsonConvert.DeserializeObject<CustomList>(Event);
               temp = customLists.FirstOrDefault(x => x.CustomListId == temp.CustomListId);
               customLists.Remove(temp);
               await InvokeAsync(StateHasChanged);
           });

            hub.HubConnection.On<string>("ListUpdated", async Event =>
            {
                var temp = JsonConvert.DeserializeObject<CustomList>(Event);

                foreach (var list in customLists)
                {
                    if (temp.CustomListId == list.CustomListId)
                    {
                        customLists.Remove(list);
                        customLists.Add(temp);
                        break;
                    }
                }
                await InvokeAsync(StateHasChanged);
            });

            hub.HubConnection.On<string>("ListAdded", async Event =>
            {
                var temp = JsonConvert.DeserializeObject<CustomList>(Event);

                if (!customLists.Contains(temp))
                {
                    customLists.Add(temp);
                    await InvokeAsync(StateHasChanged);
                }
            });

            hub.HubConnection.On<string>("ActivityAdded", async Event =>
            {
                var temp = JsonConvert.DeserializeObject<Activity>(Event);

                if (!activities.Contains(temp))
                {
                    activities.Add(temp);
                    await InvokeAsync(StateHasChanged);
                }
            });

            hub.HubConnection.On<string>("ActivityUpdated", async Event =>
            {
                var temp = JsonConvert.DeserializeObject<Activity>(Event);

                foreach (var activity in activities)
                {
                    if (temp.ActivityId == activity.ActivityId)
                    {
                        activities.Remove(activity);
                        activities.Add(temp);
                        break;
                    }
                }
                await InvokeAsync(StateHasChanged);
            });

            hub.HubConnection.On<string>("ActivityDeleted", async Event =>
            {
                var temp = JsonConvert.DeserializeObject<Activity>(Event);
                temp = activities.FirstOrDefault(x => x.ActivityId == temp.ActivityId);
                activities.Remove(temp);
                await InvokeAsync(StateHasChanged);
            });

            await InvokeAsync(StateHasChanged);
            await base.OnInitializedAsync();
        }
        else
        {
            await hub.StartConnectionAsync();
            if (hub.HubConnection.State == HubConnectionState.Connected)
            {
                StateHasChanged();
            }
        }
    }

    private void UpdateTableTimeSlots()
    {
        if (activities != null && activities.Count != 0)
        {
            var tempList = activities.OrderBy(x => x.StartDate.Hour).ToList();
            timeSlots.Clear();
            //use something like this if there is a reason to cut of the extra time after "tempList[tempList.Count-1].EndDate.Hour+1"
            //do remember that this will take in to consideration if the enddate is 23 + 1 which would be above the max
            for (int i = (tempList[0].StartDate.Hour - 1 > 0) ? tempList[0].StartDate.Hour - 1 : 0; i <= 23; i++)
            {
                if (i < 10)
                {
                    timeSlots.Add($"0{i}:00");
                }
                else
                {
                    timeSlots.Add($"{i}:00");
                }
            }
        }
    }

    private async void UpdateListItem(CustomListItem item, CustomList list)
    {
        foreach (var oldItem in list.Items)
        {
            if (oldItem.CustomlistItemId == item.CustomlistItemId)
            {
                oldItem.Completed = !item.Completed;
            }
        }
        await hub.UpdateList(list.FamilyId, list);
    }
    private void EditList(CustomList list)
    {
        SelectedList = list;
        IsEditListVisible = true;
    }
    private void ToggleListUpdate()
    {
        IsEditListVisible = !IsEditListVisible;
    }
    public void CreateActivity()
    {
        isCreateModalVisible = true;
    }

    public void CardPressed(Activity activity)
    {
        Console.WriteLine("Card: " + activity.Name + " was pressed");
        isModalVisible = true;
        clickedActivity = activity;
    }

    private void CloseModal()
    {
        isModalVisible = false;
        clickedActivity = null; // Optionally clear the activity
    }
    private void CloseCreation()
    {
        isCreateModalVisible = false;
        UpdateTableTimeSlots();
    }
    private void ToggleListCreation()
    {
        isCreateListVisible = !isCreateListVisible;
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (Token.CurrentAccount.UserId <= 0)
        {
            Navigation.NavigateTo("/");
        }
    }


}
