@page "/"
@* @rendermode InteractiveWebAssemblyRenderMode *@
@using Entities
@using Frontend.Data
@using Microsoft.AspNetCore.SignalR.Client
@using Services
@using Services.Interfaces

@inject NavigationManager Navigation
@inject SignalRService hub 
@inject SessionToken Token

<PageTitle>Login Page</PageTitle>
<article class="Container">

    <div class="LoginContainer">

        <div class="LoginContainerElement">
            <p>Username</p>
            <input type="text" @bind=Account.UserName placeholder="Enter Username here"/>
        </div>

        <div class="LoginContainerElement">
            <p>Password</p>
            <input type="password" @bind=Account.Password placeholder="Enter Password here" />
        </div>

        <button @onclick="() => Login(Account)">
            Login
        </button>
    </div>

</article>

@code {
    public User Account = new();
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(hub.HubConnection);
        if (hub.HubConnection.State == HubConnectionState.Disconnected)
        {
            await hub.StartConnectionAsync();
            Console.WriteLine(hub.HubConnection.State);
        }
        else
        {

        }
    }

    private async Task Login(User user)
    {
        if (hub.HubConnection != null)
        {
            if (hub.HubConnection.State == HubConnectionState.Connected)
            {
                try
                {
                    Account = await hub.HubConnection.InvokeAsync<User>("Login", user);

                    if (Account.UserId > 0)
                    {
                        Token.CurrentAccount = Account;
                        if(await hub.HubConnection.InvokeAsync<bool>("Register", Account)) //could cut this down to one call if i wanted to
                        {
                            Navigation.NavigateTo("/mainpage");
                        }
                        else
                        {
                            Console.WriteLine("Failed to connect to group");
                        }
                    }

                    await InvokeAsync(StateHasChanged);
                }
                catch (Exception ex)
                {
                    throw;
                }
            }
        }
    }
}
